---
import { type CollectionEntry } from "astro:content";
import ArchiveItem from "./ArchiveItem.astro";

type Props = {
  page: {
    data: CollectionEntry<"blog">[];
    url: {
      prev: string;
      next: string;
    };
    currentPage: number;
    lastPage: number;
  };
};

const { page } = Astro.props;
const posts = page.data;
posts.sort((a, b) => {
  return b.data.pubDate.getTime() - a.data.pubDate.getTime();
});

// group by year
const postsByYear: Map<number, CollectionEntry<"blog">[]> = new Map();
posts.forEach((post) => {
  const year = post.data.pubDate.getFullYear();
  if (postsByYear.has(year)) {
    postsByYear.get(year)!.push(post);
  } else {
    postsByYear.set(year, [post]);
  }
});
---

<section class="acrylic w-full">
  <ul class="flex flex-col">
    {
      [...postsByYear.entries()].map(([year, posts]) => {
        return (
          <li class="flex flex-col justify-start items-start w-full ">
            <div class="p-2 my-2 border-b-4 border-transparent hover:border-purple-500 transition-all duration-300 ease-in">
              <span class="text-2xl font-bold ">{year}</span>
            </div>
            <div class="w-full">
              <span class="mx-2">Total:{posts.length}</span>
              <ul class="">
                {posts.map((post) => {
                  return <ArchiveItem post={post} />;
                })}
              </ul>
            </div>
          </li>
        );
      })
    }
  </ul>
</section>
