---
import { config } from '@assets/ts/consts';
import { getCollection, type CollectionEntry } from 'astro:content';
import SectionItem from './SectionItem.astro';
import { getAllPosts } from '@assets/ts/utils';
import PostItem from './PostItem.astro';
interface Props {
  sliceNum?: number;
  title?: string;
  entry: CollectionEntry<'blog'>;
}
const { sliceNum = config.sliceNum, title, entry } = Astro.props;
let posts: CollectionEntry<'blog'>[];

const allPosts = await getAllPosts();
const uniquePosts = new Set();
entry.data.tags.forEach((tag) => {
  allPosts.forEach((post) => {
    if (post.data.tags.includes(tag) && post.id !== entry.id) {
      uniquePosts.add(post);
    }
  });
});
posts = (Array.from(uniquePosts) as CollectionEntry<'blog'>[]).sort(
  (a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime()
);
---

{
  posts.length > 0 && (
    <SectionItem title={title}>
      <div class='grid divide-y divide-gray-500/30 space-y-5'>
        {posts.slice(0, sliceNum).map((post) => (
          <PostItem post={post} />
        ))}
      </div>
    </SectionItem>
  )
}
