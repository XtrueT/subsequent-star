---
import SectionItem from "./SectionItem.astro";
import TocLink from "./TocLink.astro";

interface Props {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
  title: string;
}

const { headings, title } = Astro.props;

const generateToc = (headings: any[]) => {
  const toc: any[] = [];
  const parentHeadings = new Map();
  let minDepth = Number.MAX_SAFE_INTEGER;
  for (const heading of headings) {
    if (heading.depth < minDepth) {
      minDepth = heading.depth;
    }
  }
  for (const heading of headings) {
    const sub: any[] = [];
    const { depth } = heading;
    const currentHeading = { ...heading, sub };
    parentHeadings.set(depth, currentHeading);
    if (depth === minDepth || depth === 2) {
      toc.push(currentHeading);
    } else {
      const parentHeading = parentHeadings.get(depth - 1);
      parentHeading
        ? parentHeading.sub.push(currentHeading)
        : toc.push(currentHeading);
    }
  }
  return toc;
};
---

{
  headings.length > 0 && (
    <SectionItem title="文章目录">
      <details class="p-2 mt-5" open>
        <summary class="">{title}</summary>
        <ul id="tocList" class="max-h-[40vh] h-full overflow-y-auto">
          {generateToc(headings).map((heading) => (
            <TocLink heading={heading} />
          ))}
        </ul>
      </details>
    </SectionItem>
  )
}

<script>
  // JavaScript 逻辑
  function scrollToAnchor(link) {
    const href = link.getAttribute("href");
    const targetElement = document.getElementById(href.substring(1));
    if (targetElement) {
      targetElement.scrollIntoView(true);
    }
  }

  function setupTocLinkObserver() {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const link = document.querySelector(
              `.toc-link[href="#${entry.target.id}"]`
            );
            if (link) {
              document.querySelectorAll(".toc-link").forEach((item) => {
                item.classList.remove("active");
                item.parentElement?.classList.remove("active");
              });
              link.classList.add("active");
              link.parentElement?.classList.add("active");
            }
          }
        });
        debouncedHandleScrollEnd();
      },
      {
        root: document, // 相对于视口观察
        rootMargin: "0px 0px -75% 0px",
        threshold: 1, // 元素与视口交叉的阈值
      }
    );
    // 为每个锚点设置观察器
    document.querySelectorAll(".toc-link").forEach((link) => {
      const href = link.getAttribute("href") || "";
      const targetElement = document.getElementById(href.substring(1));
      targetElement && observer.observe(targetElement);
    });
  }

  function setScrollTo() {
    const activeLinks = document.querySelectorAll(".toc-link.active");
    const activeLastLink = activeLinks[activeLinks.length - 1] as HTMLElement;
    const tocList = document.getElementById("tocList");
    if (
      activeLastLink &&
      tocList &&
      tocList.scrollHeight > tocList.offsetHeight &&
      activeLastLink.classList.contains("active")
    ) {
      // 获取所有高亮的目录项
      const newtop =
        activeLastLink.offsetTop -
        tocList.clientHeight / 2 -
        tocList.offsetTop -
        activeLastLink.offsetHeight / 2;
      // console.log(activeLastLink.offsetTop);
      // console.log(newtop);
      // 确保高亮的目录项在滚动区域内部是可见的
      tocList.scrollTo({
        top: newtop < 0 ? 0 : newtop,
        behavior: "smooth",
      });
    }
  }

  function debounce(func, delay) {
    let debounceTimer;
    return function (...args) {
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => func.apply(this, args), delay);
    };
  }

  const debouncedHandleScrollEnd = debounce(setScrollTo, 500);
  const debouncedHandleScrollToAnchor = debounce(scrollToAnchor, 300);

  document.addEventListener("astro:page-load", function () {
    setupTocLinkObserver();
    document.querySelectorAll(".toc-link").forEach((link) =>
      link.addEventListener("click", (event) => {
        event.preventDefault(); // 阻止默认的点击行为，避免直接跳转到锚点
        // scrollToAnchor(link);
        debouncedHandleScrollToAnchor(link);
      })
    );
  });
</script>
