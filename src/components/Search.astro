<div class="px-5 mx-auto bg-inherit text-inherit">
  <div class="relative pb-1">
    <span class="absolute inset-y-0 left-0 flex items-center pl-3">
      <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none">
        <path
          d="M21 21L15 15M17 10C17 13.866 13.866 17 10 17C6.13401 17 3 13.866 3 10C3 6.13401 6.13401 3 10 3C13.866 3 17 6.13401 17 10Z"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg>
    </span>

    <input
      type="text"
      id="search-input"
      class="w-full py-3 pl-10 pr-4 border-b border-slate-500 focus:outline-none bg-inherit text-inherit"
      placeholder="Search..."
    />
    <div class="absolute inset-x-0 overflow-y-auto max-h-72 shadow-md">
      <ul
        id="results-container"
        class="flex flex-col w-full justify-around divide-y space-y-1 theme"
      >
        <!-- 这里插入搜索结果列表项 -->
      </ul>
    </div>
  </div>
</div>
<script>
  import { config } from "../consts";

  // 定义一个搜索函数
  function SimpleSearch(options) {
    const defaults = {
      searchInput: null,
      resultsContainer: null,
      json: null,
      searchResultTemplate: "",
      noResultsText: `没有找到匹配的文章`,
      limit: 10,
      fuzzy: false,
    };
    // 合并用户提供的选项和默认选项
    const settings = Object.assign({}, defaults, options);
    const regexPost = (data, query) => {
      const regex = new RegExp(
        query.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"),
        "gi"
      );
      const results: any[] = [];
      data.forEach((post) => {
        const { data } = post;
        if (
          (settings.fuzzy &&
            (data.title.match(regex) ||
              data.tags.join(",").match(regex) ||
              data.pubDate.match(regex))) ||
          (!settings.fuzzy &&
            (data.title.toLowerCase().includes(query.toLowerCase()) ||
              data.tags.join(",").toLowerCase().includes(query.toLowerCase()) ||
              data.pubDate.toLowerCase().includes(query.toLowerCase())))
        ) {
          results.push(post);
        }
      });
      renderResults(results.slice(0, settings.limit));
    };

    // 执行搜索的函数
    async function search(query) {
      const results: any[] = [];
      if (query === "") {
        settings.resultsContainer.innerHTML = "";
        return;
      }

      // 尝试从 localStorage 中获取缓存的 JSON 数据
      const cachedData = sessionStorage.getItem("searchCache");
      if (cachedData) {
        // 解析缓存数据
        const parsedData = JSON.parse(cachedData);
        // 检查数据是否已过期
        const now = new Date().getTime();
        const expirationTime = parsedData.expirationTime || now;
        if (now < expirationTime) {
          results.push(...parsedData.data);
        }
      }
      if (results.length > 0) {
        regexPost(results, query);
      } else {
        const content = await fetch(settings.json);
        const { posts } = await content.json();
        // 设置数据的有效期
        const expirationTime = new Date(
          Date.now() + 1000 * 60 * 60 * 24
        ).getTime(); // 设置有效期为 24 小时
        // 更新缓存数据并存储
        const updatedData = {
          data: posts,
          expirationTime: expirationTime,
        };
        sessionStorage.setItem("searchCache", JSON.stringify(updatedData));
        regexPost(posts, query);
      }
    }

    // 渲染搜索结果的函数
    function renderResults(results) {
      const container = settings.resultsContainer;
      container.innerHTML = "";

      if (results.length === 0) {
        container.innerHTML = `${settings.noResultsText}`;
      } else {
        results.forEach((result) => {
          let tagHTML = "";
          //   // 遍历标签数组，为每个标签生成 HTML 元素
          const { slug, data } = result;
          const { title, pubDate, tags } = data;
          tags.forEach((tag) => {
            tagHTML += `<a href="/tags/${tag}" type="button" class="tag">#${tag}</a>`;
          });
          container.innerHTML += `<li class="flex flex-col flex-auto justify-between p-5 space-y-2">
                                        <a class="inline-block hover:underline" href="/blog/${slug}/" title="${title}">
                                            ${title}
                                        </a>
                                        <div class="flex justify-between items-center w-full ">
                                            <div class="flex  justify-around space-x-2">${tagHTML}</div>
                                            <div class="pubDate">${pubDate}</div>
                                        </div>
                                    </li>
                                    `;
        });
      }
    }

    // 监听整个文档的点击事件
    document.addEventListener("click", function (event) {
      const inputElement = settings.searchInput; // 替换成你的输入框的实际 ID
      const resultsContainer = settings.resultsContainer; // 替换成你搜索结果容器的实际 ID

      // 检查点击事件的目标是否是输入框以外的元素，并且搜索结果容器是可见的
      if (
        event.target !== inputElement &&
        !inputElement.contains(event.target) &&
        event.target !== resultsContainer &&
        !resultsContainer.contains(event.target)
      ) {
        // 销毁搜索结果
        destroyResults();
      }
    });

    // 销毁搜索结果的函数
    function destroyResults() {
      const resultsContainer = settings.resultsContainer; // 替换成你搜索结果容器的实际 ID
      resultsContainer.innerHTML = ""; // 清空搜索结果容器的内容，或者隐藏搜索结果容器
    }

    let debounceTimer;
    const debounceDelay = 300; // 防抖延迟（毫秒）

    function debounce(func, delay) {
      return function (...args) {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => func.apply(this, args), delay);
      };
    }

    const handleInputDebounced = debounce(async (keyword) => {
      await search(keyword);
      // 更新组件状态或 DOM 元素
    }, debounceDelay);

    // 初始化搜索功能
    function init() {
      const input = settings.searchInput;
      if (!input) return;

      input.addEventListener("input", function (event) {
        handleInputDebounced(event.target.value);
      });
    }

    // 返回公共方法
    return {
      init: init,
      search: search,
    };
  }
  // 初始化搜索功能
  document.addEventListener("astro:page-load", function () {
    SimpleSearch({
      searchInput: document.getElementById("search-input"),
      resultsContainer: document.getElementById("results-container"),
      json: `${config.simple_search.json}`, // 你的博客文章数据
    }).init();
  });
</script>
